name: Build and Release ZMK Firmware
on:
  push:
    tags: ["v*"]
    branches: ["**"]
  workflow_dispatch:

jobs:
# ──────────────────────────────────────────────────────────────
#  SET-UP build-matrix + keymaps
# ──────────────────────────────────────────────────────────────
  setup:
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.make-groups.outputs.groups }}

    steps:
    - name: Checkout repo (no submodules)
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with: { python-version: "3.x" }

    - name: OS deps
      run: sudo apt-get update && sudo apt-get install -y jq

    # extra keymaps exactly like build_setup.sh
    - name: Generate extra keymaps
      run: |
        echo "⚙️ Generating additional keymaps"
        python scripts/convert_keymap.py -c q2c --in-path config/keymap/charybdis.keymap
        python scripts/convert_keymap.py -c q2g --in-path config/keymap/charybdis.keymap
        mv config/keymap/charybdis.keymap config/keymap/qwerty.keymap

    - uses: actions/upload-artifact@v4
      with: { name: generated-keymaps, path: config/keymap/ }

    - name: Build-matrix JSON (identical to local auto-discover)
      run: python scripts/generate_matrix.py > build.json

    - id: make-groups
      run: |
        echo "groups=$(jq -c 'map({keymap,format,name,board})' build.json)" >>"$GITHUB_OUTPUT"
        echo "⚙️ Build Matrix Created"
        cat build.json | jq .

# ──────────────────────────────────────────────────────────────
#  BUILD clones *fresh* ZMK upstream each run (keeps you up-to-date)
# ──────────────────────────────────────────────────────────────
  build:
    name: Build (${{ matrix.combo.name }})
    needs: setup
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable

    strategy:
      fail-fast: false
      matrix:
        combo: ${{ fromJson(needs.setup.outputs.groups) }}

    env:
      FALLBACK_EXT: bin

    steps:
    # ───────── update zmk sub-repo ─────────
    - name: Checkout workflow repo (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Initialise West workspace
      shell: bash
      run: |
        set -euxo pipefail
        west init -l --mf zmk/app/west.yml .
        west update
        west zephyr-export

    # ───────── pull in keymaps ─────────
    - name: Download keymaps
      uses: actions/download-artifact@v4
      with: { name: generated-keymaps, path: config/ }

    # ───────── pull in PMW3610 driver and patch it ─────────
    - name: Setup PMW3610 driver
      shell: bash
      run: |
        echo "Setting up PMW3610 driver..."
        git clone --depth 1 https://github.com/badjeff/zmk-pmw3610-driver.git /tmp/pmw3610-driver

        # Register the pixart vendor prefix in the Devicetree bindings so Zephyr doesn't complain
        echo "🛠️  Patching pmw3610-driver to register the pixart vendor..."
        printf "pixart\tPixArt Imaging, Inc.\n" >> /tmp/pmw3610-driver/dts/bindings/vendor-prefixes.txt

        # Patch the CMakeLists to prevent 'No SOURCES given to Zephyr library' warning
        echo "🛠️  Patching pmw3610-driver CMakeLists.txt to avoid empty Zephyr target warning..."
        printf '%s\n' \
          'if(CONFIG_PMW3610)' \
          '  zephyr_library()' \
          '  zephyr_library_sources(src/pmw3610.c)' \
          '  zephyr_include_directories(${APPLICATION_SOURCE_DIR}/include)' \
          'endif()' > /tmp/pmw3610-driver/CMakeLists.txt
        echo "EXTRA_MODULES=${GITHUB_WORKSPACE};/tmp/pmw3610-driver" >> "$GITHUB_ENV"

    # ───────── Inject custom shields & helper DTSI files ─────────
    - name: Install custom shields into ZMK
      shell: bash
      run: |
        ZMK_SHIELDS_DIR="$GITHUB_WORKSPACE/zmk/app/boards/shields"
        mkdir -p "$ZMK_SHIELDS_DIR"
        cp -r boards/shields/* "$ZMK_SHIELDS_DIR/"
        for d in "$ZMK_SHIELDS_DIR"/*; do
          for f in charybdis-layouts.dtsi charybdis_pmw3610.dtsi charybdis_pointer.dtsi; do
            [ -f "config/$f" ] && cp "config/$f" "$d/" || true
          done
        done

    # ───────── Build loop ─────────
    - name: Build combo ${{ matrix.combo.name }}
      shell: bash
      working-directory: zmk/app
      run: |
        set -euo pipefail

        KM="${{ matrix.combo.keymap }}"
        FM="${{ matrix.combo.format }}"   # bt | dongle | reset
        NM="${{ matrix.combo.name }}"
        BD="${{ matrix.combo.board }}"    # nice_nano_v2

        declare -A LIST=(
          [bt]="charybdis_left charybdis_right"
          [dongle]="charybdis_left charybdis_right charybdis_dongle"
          [reset]="settings_reset"
        )

        mkdir -p "$GITHUB_WORKSPACE/out/$NM"

        for SH in ${LIST[$FM]}; do
          BUILD_DIR=$(mktemp -d)

          # Copy the selected keymap into config & rename keymap
          src="$GITHUB_WORKSPACE/config/keymap"
          dst="$GITHUB_WORKSPACE/config"

          if [[ -f "$src/${KM}.keymap" ]]; then
            cp "$src/${KM}.keymap" "$dst/charybdis.keymap"
            cp "$src/${KM}_"*.dtsi "$dst/" 2>/dev/null || true
          fi

          # Only right BT half gets Studio RPC
          STUDIO=""; [[ "$FM" == "bt" && "$SH" == *right ]] && STUDIO="-S studio-rpc-usb-uart"

          west -v build -p \
            -d "$BUILD_DIR" \
            -b "$BD" \
            $STUDIO \
            -- -DZMK_CONFIG="$dst" \
               -DZMK_EXTRA_MODULES="$EXTRA_MODULES" \
               -DSHIELD="$SH" \
               -DKEYMAP_FILE=charybdis.keymap

          ART=$(if [ -f "$BUILD_DIR/zephyr/zmk.uf2" ]; then echo "zmk.uf2"; else echo "zmk.${FALLBACK_EXT}"; fi)
          cp "$BUILD_DIR/zephyr/$ART" "$GITHUB_WORKSPACE/out/$NM/$SH.${ART##*.}"
        done

    - name: Upload firmware bundle
      uses: actions/upload-artifact@v4
      with:
        name: charybdis-${{ matrix.combo.name }}
        path: ${{ github.workspace }}/out/${{ matrix.combo.name }}/**

# ──────────────────────────────────────────────────────────────
#  RELEASE + keymap-image workflow trigger
# ──────────────────────────────────────────────────────────────
  release-firmware:
    name: Release Firmware
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions: { contents: write }

    steps:
    - uses: actions/download-artifact@v4
      with: { path: combo-artifacts/ }
    - name: Zip each combo
      working-directory: combo-artifacts
      run: for d in */; do zip -j "${d%/}.zip" "\$d"*; done
    - uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Firmware Release ${{ github.ref_name }}
        files: combo-artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  keymap_images:
    needs: build
    permissions: { contents: write }
    uses: ./.github/workflows/draw_keymaps.yaml
