name: Build and Release ZMK Firmware

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Generate additional keymaps
        run: |
          python scripts/convert_keymap.py -c q2c --in-path config/charybdis.keymap
          python scripts/convert_keymap.py -c q2g --in-path config/charybdis.keymap

      - name: Generate build matrix
        run: |
          python scripts/generate_matrix.py > build.json
          echo "🧩 Build Matrix:" && cat build.json

      - name: Upload build.json for build step
        uses: actions/upload-artifact@v4
        with:
          name: build-matrix
          path: build.json

  build:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable

    env:
      FALLBACK_EXT: bin

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          apt-get update
          apt-get install -y jq zip

      - name: Download build matrix
        uses: actions/download-artifact@v4
        with:
          name: build-matrix

      - name: Echo matrix and key env vars
        run: |
          echo "🧩 Matrix:" && cat build.json
          echo "🌐 ENV:" && env | grep -E 'BUILD_DIR|BASE_DIR|EXTRA_CMAKE_ARGS|FALLBACK_EXT'

      - name: Prepare isolated build directory
        run: echo "BUILD_DIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Prepare extra modules
        id: prep
        shell: bash {0}
        run: |
          set -euxo pipefail
          if [ -f zephyr/module.yml ]; then
            ZMK_LOAD_ARG="-DZMK_EXTRA_MODULES=${GITHUB_WORKSPACE}"
            BASE_DIR="${TMPDIR:-/tmp}/zmk-config"
            mkdir -p "${BASE_DIR}/config" "${BASE_DIR}/boards/shields"
            cp -r config/*         "${BASE_DIR}/config/"
            cp -r boards/shields/* "${BASE_DIR}/boards/shields/"
          else
            ZMK_LOAD_ARG=""
            BASE_DIR="${GITHUB_WORKSPACE}"
          fi
          echo "BASE_DIR=$BASE_DIR"       >> $GITHUB_ENV
          echo "EXTRA_CMAKE_ARGS=$ZMK_LOAD_ARG" >> $GITHUB_ENV

      - name: Cache west & zephyr modules
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            ${{ env.BASE_DIR }}/modules/
            ${{ env.BASE_DIR }}/tools/
            ${{ env.BASE_DIR }}/zephyr/
            ${{ env.BASE_DIR }}/bootloader/
            ${{ env.BASE_DIR }}/zmk/
          key: ${{ runner.os }}-zmk-${{ hashFiles('config/west.yml','boards/shields/**') }}
          restore-keys: |
            ${{ runner.os }}-zmk-

      - name: West Init & Update
        working-directory: ${{ env.BASE_DIR }}
        run: |
          west init -l config
          west update
          west zephyr-export

      - name: Build all firmware
        shell: bash {0}
        run: |
          set -euxo pipefail
          jq -c '.[]' build.json | while IFS= read -r cfg; do
            NAME=$(echo "$cfg" | jq -r '.name')
            BOARD=$(echo "$cfg" | jq -r '.board')
            SHIELD=$(echo "$cfg" | jq -r '.shield')
            KEYMAP=$(echo "$cfg" | jq -r '.keymap')
            FORMAT=$(echo "$cfg" | jq -r '.format')
            ARTIFACT=$(echo "$cfg" | jq -r '."artifact-name"')

            # swap in the correct keymap for this build (only if it exists)
            if [ -f "${GITHUB_WORKSPACE}/config/charybdis_${KEYMAP}.keymap" ]; then
              echo "🔄 Using custom keymap: charybdis_${KEYMAP}.keymap"
              cp "${GITHUB_WORKSPACE}/config/charybdis_${KEYMAP}.keymap" \
                "${BASE_DIR}/config/charybdis.keymap"
            else
              echo "ℹ️  No custom keymap for '${KEYMAP}', leaving default"
            fi

            echo "::group::Building $NAME"
            BUILD_PATH="${BUILD_DIR}/${NAME}"
            mkdir -p "$BUILD_PATH"

            # validate shield module
            SHIELD_MODULE="charybdis-${FORMAT}"
            MODULE_PATH="${BASE_DIR}/boards/shields/${SHIELD_MODULE}"
            if [ ! -f "${MODULE_PATH}/${SHIELD}.overlay" ] && [ ! -f "${MODULE_PATH}/${SHIELD}.conf" ]; then
              echo "❌ Skipping invalid shield: $SHIELD"
              echo "::endgroup::"
              continue
            fi

            # build
            (
              cd "${BASE_DIR}"
              west build -s zmk/app \
                -d "$BUILD_PATH" \
                -b "$BOARD" \
                -- -DZMK_CONFIG="${BASE_DIR}/config" \
                    "${EXTRA_CMAKE_ARGS}" \
                    -DSHIELD="$SHIELD"
            )

            mkdir -p "$BUILD_PATH/artifacts"
            if [ -f "$BUILD_PATH/zephyr/zmk.uf2" ]; then
              cp "$BUILD_PATH/zephyr/zmk.uf2" \
                 "$BUILD_PATH/artifacts/${ARTIFACT}.uf2"
            elif [ -f "$BUILD_PATH/zephyr/zmk.${FALLBACK_EXT}" ]; then
              cp "$BUILD_PATH/zephyr/zmk.${FALLBACK_EXT}" \
                 "$BUILD_PATH/artifacts/${ARTIFACT}.${FALLBACK_EXT}"
            fi

            # debug dumps
            echo "🔧 Kconfig for $NAME"
            grep -v -e '^#' -e '^$' "$BUILD_PATH/zephyr/.config" | sort || true
            echo "🔧 DTS for $NAME"
            cat "$BUILD_PATH/zephyr/zephyr.dts" || true

            echo "::endgroup::"
          done

      - name: Get unique keymap-format groups
        id: groups
        run: |
          jq -r '[.[] | "\(.keymap)-\(.format)"] | unique | .[]' build.json > merge-groups.txt
          echo "Groups to merge:" && cat merge-groups.txt

      - name: Merge and zip groups
        shell: bash {0}
        run: |
          set -euxo pipefail
          mkdir -p release_zips
          while IFS= read -r group; do
            name="firmware-charybdis-${group}"
            mkdir -p "$name"
            find "${BUILD_DIR}" -type f \
              \( -name "${name}-*.uf2" -o -name "${name}-*.${FALLBACK_EXT}" \) \
              -exec cp {} "$name"/ \;
            zip -j "release_zips/${name}.zip" "$name"/*
          done < merge-groups.txt

      - name: Publish to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: Firmware ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: release_zips/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
