name: Build and Release ZMK Firmware

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.make-groups.outputs.groups }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate additional keymaps
        run: |
          python scripts/convert_keymap.py -c q2c --in-path config/charybdis.keymap
          python scripts/convert_keymap.py -c q2g --in-path config/charybdis.keymap

      - name: Upload generated keymaps
        uses: actions/upload-artifact@v4
        with:
          name: generated-keymaps
          path: config/*.keymap

      - name: Generate build matrix
        run: |
          python scripts/generate_matrix.py > build.json

      - name: Generate firmware matrix JSON
        id: make-groups
        run: |
          groups=$(jq -c '[.[] | {keymap, format, shield, board, artifact: ."artifact-name"}]' build.json)
          echo "groups=$groups" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable

    strategy:
      fail-fast: false
      matrix:
        firmware: ${{ fromJson(needs.setup.outputs.groups) }}

    env:
      FALLBACK_EXT: bin
      BASE_DIR: /tmp/zmk-config

    steps:
      - uses: actions/checkout@v4

      - name: Download generated keymaps
        uses: actions/download-artifact@v4
        with:
          name: generated-keymaps
          path: config/

      - name: Prepare extra modules
        run: |
          BASE_DIR="${BASE_DIR}"
          mkdir -p "${BASE_DIR}/config" "${BASE_DIR}/boards/shields"
          cp -r config/* "${BASE_DIR}/config/"
          cp -r boards/shields/* "${BASE_DIR}/boards/shields/"
          echo "BASE_DIR=$BASE_DIR" >> $GITHUB_ENV
          echo "EXTRA_CMAKE_ARGS=-DZMK_EXTRA_MODULES=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

      - name: Init west & fetch deps
        working-directory: ${{ env.BASE_DIR }}
        shell: bash {0}
        run: |
          west init -l config
          west update
          west zephyr-export

      - name: Build firmware ${{ matrix.firmware.artifact }}
        shell: bash {0}
        working-directory: ${{ env.BASE_DIR }}
        run: |
          set -euxo pipefail
          KEYMAP="${{ matrix.firmware.keymap }}"
          FORMAT="${{ matrix.firmware.format }}"
          SHIELD="${{ matrix.firmware.shield }}"
          BOARD="${{ matrix.firmware.board }}"
          ARTIFACT="${{ matrix.firmware.artifact }}"
          BUILD_PATH=$(mktemp -d)

          if [[ "$FORMAT" == "reset" ]]; then
            ARTIFACT="firmware-reset-nanov2"
          fi

          if [[ -f "config/${KEYMAP}.keymap" ]]; then
            cp "config/${KEYMAP}.keymap" "config/charybdis.keymap"
          fi

          west build -s zmk/app \
            -d "$BUILD_PATH" \
            -b "$BOARD" \
            -- \
            -DZMK_CONFIG="${BASE_DIR}/config" \
            -DZMK_EXTRA_MODULES="${GITHUB_WORKSPACE}" \
            -DSHIELD="$SHIELD"

          mkdir -p "${GITHUB_WORKSPACE}/${KEYMAP}-${FORMAT}"

          if [[ -f "$BUILD_PATH/zephyr/zmk.uf2" ]]; then
            cp "$BUILD_PATH/zephyr/zmk.uf2" "${GITHUB_WORKSPACE}/${KEYMAP}-${FORMAT}/${SHIELD}.uf2"
          elif [[ -f "$BUILD_PATH/zephyr/zmk.${FALLBACK_EXT}" ]]; then
            cp "$BUILD_PATH/zephyr/zmk.${FALLBACK_EXT}" "${GITHUB_WORKSPACE}/${KEYMAP}-${FORMAT}/${SHIELD}.${FALLBACK_EXT}"
          else
            echo "⚠️ No build artifact found for ${KEYMAP}-${FORMAT}-${SHIELD}"
            exit 1
          fi

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.firmware.artifact }}
          path: ${{ matrix.firmware.keymap }}-${{ matrix.firmware.format }}/*
  
  group-firmware:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install zip
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-firmware
          merge-multiple: false

      - name: Group firmware into folders
        shell: bash
        run: |
          mkdir grouped
          find all-firmware -type f -name '*.uf2' | while read -r file; do
            artifact_dir=$(basename "$(dirname "$file")")  # e.g., firmware-charybdis-qwerty-dongle-charybdis_right
            filename=$(basename "$file")                   # e.g., charybdis_right.uf2

            IFS="-" read -r _ _ keymap format shield <<< "$artifact_dir"
            outdir="grouped/${keymap}-${format}"
            mkdir -p "$outdir"
            cp "$file" "$outdir/${shield}.uf2"
          done

      - name: Zip each layout-format folder
        shell: bash
        run: |
          cd grouped
          for dir in */; do
            zip -r "../${dir%/}.zip" "$dir"
          done
      
      - name: List zipped firmware folders
        run: |
          echo "Zipped files:"
          ls -lh *.zip

      - name: Upload zipped layouts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-zips
          path: |
            *.zip

      - name: Debug release ref
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "Tag name: ${GITHUB_REF##*/}"

      - name: Ensure release exists
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: "Firmware Release ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: "Auto-generated firmware release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload each zip to GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for zipfile in *.zip; do
            echo "Uploading $zipfile to GitHub Release"
            gh release upload "${GITHUB_REF##*/}" "$zipfile" --clobber || echo "Warning: upload failed for $zipfile"
          done
