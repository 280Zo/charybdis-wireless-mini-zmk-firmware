name: Build and Release ZMK Firmware
on:
  push:
    tags: ["v*"]
    branches: ["**"]
  workflow_dispatch:

jobs:
# ──────────────────────────────────────────────────────────────
#  SET-UP build-matrix + keymaps
# ──────────────────────────────────────────────────────────────
  setup:
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.make-groups.outputs.groups }}

    steps:
    - name: Checkout repo (no submodules)
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with: { python-version: "3.x" }

    - name: OS deps
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Generate extra keymaps
      run: |
        echo "⚙️ Generating additional keymaps"
        mv config/keymap/charybdis.keymap config/keymap/qwerty.keymap

    - uses: actions/upload-artifact@v4
      with: { name: generated-keymaps, path: config/keymap/ }

    - name: Build-matrix JSON
      run: python scripts/generate_matrix.py > build.json

    - id: make-groups
      run: |
        echo "groups=$(jq -c 'map({keymap,format,name,board})' build.json)" >>"$GITHUB_OUTPUT"
        echo "⚙️ Build Matrix Created"
        cat build.json | jq .

# # ──────────────────────────────────────────────────────────────
# #  BUILD
# # ──────────────────────────────────────────────────────────────
#   build:
#     name: Build (${{ matrix.combo.name }})
#     needs: setup
#     runs-on: ubuntu-latest
#     container: zmkfirmware/zmk-build-arm:stable

#     strategy:
#       fail-fast: false
#       matrix:
#         combo: ${{ fromJson(needs.setup.outputs.groups) }}

#     steps:
#     - name: Install tree
#       run: apt-get update && apt-get install -y tree

#     # ───────── update zmk sub-repo ─────────
#     - name: Checkout workflow repo
#       uses: actions/checkout@v4

#     - name: Initialise West workspace
#       shell: bash
#       run: |
#         set -euxo pipefail
#         echo "✨ Initializing the west workspace with the local manifest from config/west.yml."
#         west init -l --mf $GITHUB_WORKSPACE/config/west.yml "$GITHUB_WORKSPACE/config"
#         echo "🔄 Updating and synchronizing all repositories in the workspace."
#         west update
#         echo "📦 Exporting Zephyr for external build system integration."
#         west zephyr-export

#         # ───────── DEBUG LOGS ─────────
#         echo ""
#         echo "🪳 Debug Logs"
#         echo "👀 Top dir  : $(west topdir)"
#         echo "👀 Projects :"
#         ls -1 $(west topdir)     # you'll see zmk, zephyr, modules/ …
#         echo "👀 West workspace ready. Project structure:"
#         west list

#     # ───────── pull in keymaps ─────────
#     - name: Download keymaps
#       uses: actions/download-artifact@v4
#       with: { name: generated-keymaps, path: config/keymap }

#     # ───────── stage keymaps and helper files ─────────
#     - name: Stage keymaps, overlays, and dtsi files into source tree
#       shell: bash
#       run: |
#         # Create overlays directory inside zmk/app
#         mkdir -p zmk/app/overlays

#         # Only for bt/dongle builds, copy in the single keymap and any helpers
#         if [[ "${{ matrix.combo.format }}" != "reset" ]]; then
#           cp config/keymap/${{ matrix.combo.keymap }}.keymap \
#              zmk/app/overlays/charybdis.keymap

#           # copy helper .dtsi files if they exist
#           cp config/*.dtsi zmk/app/overlays/ 2>/dev/null || true
#           cp config/keymap/*.dtsi zmk/app/overlays/ 2>/dev/null || true
#         fi

#     # ───────── patch the PMW3610 driver that West checked out ─────────
#     - name: Patch PMW3610 driver (West-determined path)
#       shell: bash
#       run: |
#         # Ask West where the project is
#         driver_dir=$(west list -f '{abspath}' zmk-pmw3610-driver)
#         binding_dir="$driver_dir/dts/bindings"

#         echo "🛠️  Registering pixart vendor in the driver's bindings…"
#         printf "pixart\tPixArt Imaging, Inc.\n" >> "$binding_dir/vendor-prefixes.txt"

#         echo "🛠️  Patching the driver's CMakeLists…"
#         cat > "$driver_dir/CMakeLists.txt" <<'EOF'
#         if(CONFIG_PMW3610)
#           zephyr_library()
#           zephyr_library_sources(src/pmw3610.c)
#           zephyr_include_directories(${APPLICATION_SOURCE_DIR}/include)
#         endif()
#         EOF

#         echo "Driver path is: $driver_dir"
#         ls -R $driver_dir | head

#     # ───────── Inject custom shields & helper DTSI files ─────────
#     - name: Inject custom shields & helper files
#       if: ${{ matrix.combo.format != 'reset' }}
#       shell: bash
#       run: |
#         ZMK_SHIELDS_DIR="$GITHUB_WORKSPACE/zmk/app/boards/shields"
#         mkdir -p "$ZMK_SHIELDS_DIR"
#         cp -r "boards/shields/charybdis_${{ matrix.combo.format }}" "$ZMK_SHIELDS_DIR/"
#         for d in "$ZMK_SHIELDS_DIR"/*; do
#           for f in charybdis-layouts.dtsi charybdis_pmw3610.dtsi charybdis_pointer.dtsi; do
#             [ -f "config/$f" ] && cp "config/$f" "$d/" || true
#           done
#         done

#     # ───────── Build ─────────
#     - name: Build combo ${{ matrix.combo.name }}
#       shell: bash
#       working-directory: zmk/app
#       run: |
#         set -euo pipefail

#         KM="${{ matrix.combo.keymap }}"
#         FM="${{ matrix.combo.format }}"   # bt | dongle | reset
#         NM="${{ matrix.combo.name }}"
#         BD="${{ matrix.combo.board }}"    # nice_nano_v2

#         declare -A LIST=(
#           [bt]="charybdis_left charybdis_right"
#           [dongle]="charybdis_left charybdis_right charybdis_dongle"
#           [reset]="settings_reset"
#         )

#         mkdir -p "$GITHUB_WORKSPACE/out/$NM"
#         CONFIG_DIR="$GITHUB_WORKSPACE/config"
        
#         # ──────────────────────────────────────────────────────────────

#         for SH in ${LIST[$FM]}; do
#           BUILD_DIR=$(mktemp -d)

#           # studio RPC only on right half of BT builds
#           if [[ "$FM" == "bt" && "$SH" == *right ]]; then
#             SNIPPET_OPTION="-DSNIPPET=studio-rpc-usb-uart"
#           else
#             SNIPPET_OPTION=""
#           fi

#           # set keymap
#           if [[ "$FM" != "reset" ]]; then
#             KEYMAP_OPTION="-DKEYMAP_FILE=overlays/charybdis.keymap"
#           else
#             KEYMAP_OPTION=""
#           fi

#           # ───────── DEBUG LOGS ─────────
#           echo "🪳 Debug Logs"
#           echo "Build Variables:"
#           echo "→ Keymap       (KM): $KM"
#           echo "→ Format       (FM): $FM"
#           echo "→ Name         (NM): $NM"
#           echo "→ Board        (BD): $BD"
#           echo "→ Current directory: $(pwd)"
#           echo "→ KEYMAP_OPTION    :$KEYMAP_OPTION"
#           echo "→ SNIPPET_OPTION   :$SNIPPET_OPTION"
#           echo "→ Build dir        : $BUILD_DIR"
#           # echo "→ Directory contents:"
#           # tree .
#           # echo "📍 Showing current build directory and listing contents:"
#           # echo "GITHUB_WORKSPACE:"
#           # tree $GITHUB_WORKSPACE

#           echo "🛠 Kicking off the firmware build..."
#           west build -p \
#             -d "$BUILD_DIR" \
#             -b "$BD" \
#             -- \
#             "-DZMK_CONFIG=$CONFIG_DIR" \
#             "-DSHIELD=$SH" \
#             "$KEYMAP_OPTION" \
#             "$SNIPPET_OPTION"

#           ART=$(if [[ -f "$BUILD_DIR/zephyr/zmk.uf2" ]]; then echo zmk.uf2; else echo zmk.bin; fi)
#           cp "$BUILD_DIR/zephyr/$ART" "$GITHUB_WORKSPACE/out/$NM/$SH.${ART##*.}"
#         done

#     - name: Upload firmware bundle
#       uses: actions/upload-artifact@v4
#       with:
#         name: charybdis-${{ matrix.combo.name }}
#         path: ${{ github.workspace }}/out/${{ matrix.combo.name }}/**

# # ──────────────────────────────────────────────────────────────
# #  RELEASE - zip files to add to release
# # ──────────────────────────────────────────────────────────────
#   release-firmware:
#     name: Release Firmware
#     needs: build
#     runs-on: ubuntu-latest
#     if: startsWith(github.ref, 'refs/tags/')
#     permissions: { contents: write }

#     steps:
#     - uses: actions/download-artifact@v4
#       with: { path: combo-artifacts/ }
#     - name: Zip each combo
#       working-directory: combo-artifacts
#       run: for d in */; do zip -j "${d%/}.zip" "\$d"*; done
#     - uses: softprops/action-gh-release@v1
#       with:
#         tag_name: ${{ github.ref_name }}
#         name: Firmware Release ${{ github.ref_name }}
#         files: combo-artifacts/*.zip
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# ──────────────────────────────────────────────────────────────
#  IMAGES - generate keymap images
# ──────────────────────────────────────────────────────────────

  # ─────────────────────────────────────────
  # Base + Num only
  # ─────────────────────────────────────────
  keymap_base:
    # needs: build
    permissions:
      contents: write
    uses: ./.github/workflows/draw_keymaps.yaml
    with:
      draw_args: "-s BASE --keys-only"
      amend_commit: false
      output_folder: keymap-drawer/base

  # ─────────────────────────────────────────
  # Full-layer render
  # ─────────────────────────────────────────
  keymap_images:
    needs: [keymap_base]   # ensure it runs after the first, optional
    permissions:
      contents: write
    uses: ./.github/workflows/draw_keymaps.yaml