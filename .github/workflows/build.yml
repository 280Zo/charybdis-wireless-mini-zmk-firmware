name: Build and Release ZMK Firmware

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.set.outputs.build_matrix }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Generate keymaps
        run: |
          python scripts/convert_keymap.py -c q2c --in-path config/charybdis.keymap
          python scripts/convert_keymap.py -c q2g --in-path config/charybdis.keymap

      - name: Generate build matrix
        id: set
        run: |
          python scripts/generate_matrix.py > build.json
          echo "🧩 Build Matrix:"
          cat build.json
          echo "build_matrix=$(cat build.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Upload build.json for build step
        uses: actions/upload-artifact@v4
        with:
          name: build-matrix
          path: build.json

  build:
    runs-on: ubuntu-latest
    needs: setup
    container:
      image: zmkfirmware/zmk-build-arm:stable

    steps:
      - uses: actions/checkout@v4

      - name: Install jq and zip
        run: apt-get update && apt-get install -y jq zip

      - name: Download build matrix
        uses: actions/download-artifact@v4
        with:
          name: build-matrix

      - name: Prepare isolated build directory
        run: echo "BUILD_DIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: West Init & Update
        run: |
          west init -l config
          west update
          west zephyr-export

      - name: Prepare extra modules
        run: |
          if [ -f zephyr/module.yml ]; then
            echo "EXTRA_CMAKE_ARGS=-DZMK_EXTRA_MODULES=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          else
            echo "EXTRA_CMAKE_ARGS=" >> $GITHUB_ENV
          fi

      - name: Build all firmware
        run: |
          cat build.json | jq -c '.[]' | while read config; do
            NAME=$(echo "$config" | jq -r '.name')
            BOARD=$(echo "$config" | jq -r '.board')
            SHIELD=$(echo "$config" | jq -r '.shield')
            KEYMAP=$(echo "$config" | jq -r '.keymap')
            FORMAT=$(echo "$config" | jq -r '.format')
            ARTIFACT=$(echo "$config" | jq -r '."artifact-name"')

            echo "::group::Building $NAME"
            BUILD_PATH="${BUILD_DIR}/${NAME}"
            mkdir -p "$BUILD_PATH"

            SHIELD_MODULE="charybdis-${FORMAT}"
            MODULE_PATH="$GITHUB_WORKSPACE/boards/shields/${SHIELD_MODULE}"
            if [ ! -f "${MODULE_PATH}/${SHIELD}.overlay" ] && \
               [ ! -f "${MODULE_PATH}/${SHIELD}.conf" ]; then
              echo "❌ Skipping invalid shield: $SHIELD (no overlay/conf in $MODULE_PATH)"
              echo "::endgroup::"
              continue
            fi

            west build -s zmk/app \
              -d "$BUILD_PATH" \
              -b "$BOARD" \
              -- \
              -DZMK_CONFIG=$GITHUB_WORKSPACE/config \
              $EXTRA_CMAKE_ARGS \
              -DSHIELD="$SHIELD" \
              -DCONFIG_ZMK_KEYMAP="$KEYMAP"

            mkdir -p "$BUILD_PATH/artifacts"
            if [ -f "$BUILD_PATH/zephyr/zmk.uf2" ]; then
              cp "$BUILD_PATH/zephyr/zmk.uf2" "$BUILD_PATH/artifacts/${ARTIFACT}.uf2"
            elif [ -f "$BUILD_PATH/zephyr/zmk.bin" ]; then
              cp "$BUILD_PATH/zephyr/zmk.bin" "$BUILD_PATH/artifacts/${ARTIFACT}.bin"
            fi
            echo "::endgroup::"
          done

      - name: Get unique keymap-format groups
        id: groups
        run: |
          jq -r '[.[] | "\(.keymap)-\(.format)"] | unique | .[]' build.json > merge-groups.txt
          echo "Groups to merge:"
          cat merge-groups.txt

      - name: Merge and zip groups
        run: |
          mkdir -p release_zips
          while read group; do
            name="firmware-charybdis-${group}"
            mkdir -p "$name"
            find $BUILD_DIR -type f -name "${name}-*.uf2" -exec cp {} "$name/" \;
            zip -j "release_zips/${name}.zip" "$name"/*
          done < merge-groups.txt

      - name: Publish to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: Firmware ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: release_zips/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
