name: Build and Release ZMK Firmware

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.make-groups.outputs.groups }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate additional keymaps
        run: |
          python scripts/convert_keymap.py -c q2c --in-path config/charybdis.keymap
          python scripts/convert_keymap.py -c q2g --in-path config/charybdis.keymap

      - name: Upload generated keymaps
        uses: actions/upload-artifact@v4
        with:
          name: generated-keymaps
          path: config/*.keymap

      - name: Generate build matrix
        run: |
          python scripts/generate_matrix.py > build.json

      - name: Make groups JSON
        id: make-groups
        run: |
          # load the raw build.json into a variable
          raw=$(cat build.json)

          # Use jq to transform each object {keymap,format,name,board}
          groups=$(jq -c '
            map({
              keymap: .keymap,
              format: .format,
              name: .name,
              board: .board
            })
          ' <<<"$raw")

          echo "groups=$groups" >> $GITHUB_OUTPUT
          echo "groups=$groups"

  build:
    name: Build (${{ matrix.combo.name }})
    needs: setup
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable

    strategy:
      fail-fast: false
      matrix:
        combo: ${{ fromJson(needs.setup.outputs.groups) }}

    env:
      FALLBACK_EXT: bin
      BASE_DIR: /tmp/zmk-config

    steps:
      - name: Checkout & fetch generated files
        uses: actions/checkout@v4

      - name: Download generated-keymaps
        uses: actions/download-artifact@v4
        with:
          name: generated-keymaps
          path: config/

      - name: Prepare extra modules
        shell: bash
        run: |
          # make sandbox
          mkdir -p "${BASE_DIR}/config" "${BASE_DIR}/boards/shields"
          # copy everything from repo's config including the stock charybdis.keymap
          cp -r config/* "${BASE_DIR}/config/"
          # copy custom shields
          cp -r boards/shields/* "${BASE_DIR}/boards/shields/"
          echo "BASE_DIR=$BASE_DIR"       >> $GITHUB_ENV
          echo "EXTRA_CMAKE_ARGS=-DZMK_EXTRA_MODULES=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

      - name: Init west & fetch deps
        working-directory: ${{ env.BASE_DIR }}
        run: |
          west init -l config
          west update
          west zephyr-export

      - name: Build all shields for ${{ matrix.combo.name }}
        shell: bash
        working-directory: ${{ env.BASE_DIR }}
        run: |
          set -euxo pipefail

          KM=${{ matrix.combo.keymap }}
          FM=${{ matrix.combo.format }}
          NM=${{ matrix.combo.name }}
          BD=${{ matrix.combo.board }}

          # map format â†’ shields again in bash
          declare -A SH_MAP=(
            [bt]="charybdis_left charybdis_right"
            [dongle]="charybdis_left charybdis_right charybdis_dongle"
            [reset]="settings_reset"
          )

          for SH in ${SH_MAP[$FM]}; do
            BUILD_DIR=$(mktemp -d)

            # swap in the proper keymap if it exists
            if [[ -f config/${KM}.keymap ]]; then
              cp config/${KM}.keymap config/charybdis.keymap
            fi

            # special reset naming
            ART_NAME="$NM"
            if [[ "$FM" == "reset" ]]; then
              ART_NAME="reset-nanov2"
            fi

            # run the build
            west build -s zmk/app \
              -d "$BUILD_DIR" \
              -b "$BD" \
              -- -DZMK_CONFIG="${BASE_DIR}/config" \
                 -DZMK_EXTRA_MODULES="${GITHUB_WORKSPACE}" \
                 -DSHIELD=$SH \
                 -DZEPHYR_EXTRA_DTC_OVERLAY_FILE="${BASE_DIR}/config/charybdis.keymap"

            # collect output
            mkdir -p "${GITHUB_WORKSPACE}/out/$NM"
            if [[ -f $BUILD_DIR/zephyr/zmk.uf2 ]]; then
              cp $BUILD_DIR/zephyr/zmk.uf2 \
                "${GITHUB_WORKSPACE}/out/$NM/$SH.uf2"
            else
              cp $BUILD_DIR/zephyr/zmk.${FALLBACK_EXT} \
                "${GITHUB_WORKSPACE}/out/$NM/$SH.${FALLBACK_EXT}"
            fi
          done

      - name: Upload grouped firmware ${{ matrix.combo.name }}
        uses: actions/upload-artifact@v4
        with:
          name: charybdis-${{ matrix.combo.name }}
          path: out/${{ matrix.combo.name }}/**

  release-firmware:
    name: Release Firmware
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Debug release ref
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "Tag name: ${GITHUB_REF##*/}"

      - name: Download all combo artifacts
        uses: actions/download-artifact@v4
        with:
          path: combo-artifacts/

      - name: List artifacts
        run: |
          ls -1 combo-artifacts/      

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GH CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | gh auth login --with-token

      - name: Upload each combo to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${GITHUB_REF##*/}
          for f in combo-artifacts/*; do
            echo "Uploading $(basename "$f") to release $TAG"
            gh release upload "$TAG" "$f" --clobber
          done
